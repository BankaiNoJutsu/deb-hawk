<% content_for :head do %>
<%= stylesheet_link_tag 'ui.attrlist.css' %>
<%= stylesheet_link_tag 'ui.oplist.css' %>
<%= stylesheet_link_tag 'ui.panel.css' %>
<%= javascript_include_tag 'jquery.ui.attrlist.js' %>
<%= javascript_include_tag 'jquery.ui.oplist.js' %>
<%= javascript_include_tag 'jquery.ui.panel.js' %>
<style type="text/css">
/* TODO(should): this does not belong here (also need to remove
   inline style from various elements) */
th { font-weight: bold; }
input[type=text] { width: 13em; }
select { width: 6.5em; }
select.type { width: 13em; }
</style>
<% end %>
<script type="text/javascript">

// Shotgun approach
var anything_changed = false;

var r_info = <%= Primitive.classes_and_providers.to_json %>;

var req = null;

var r_meta = <%= Primitive.metadata(@res.r_class, @res.r_provider, @res.r_type).to_json %>;

var keypress_hack = {
  r_class: "<%= escape_javascript(@res.r_class) %>",
  r_provider: "<%= escape_javascript(@res.r_provider) %>",
  r_type: "<%= escape_javascript(@res.r_type) %>"
};

function update_provider() {
  keypress_hack.r_class = $("#primitive_r_class").val()
  keypress_hack.r_provider = "";
  keypress_hack.r_type = "";
  $("#help").hide();
  $("#info").hide();
  $("#parameters").panel("body_element").attrlist({ all_attrs: {}});
  $("#primitive_r_provider option").remove();
  if (r_info.r_providers[$("#primitive_r_class").val()]) {
    $.each(r_info.r_providers[$("#primitive_r_class").val()], function() {
      $("#primitive_r_provider").append('<option value="' + escape_field(this.toString()) + '">' + escape_html(this.toString()) + "</option>");
    });
    $("#primitive_r_provider").removeAttr("disabled");
  } else {
    $("#primitive_r_provider").attr("disabled", "disabled");
  }
  update_type();
}

function update_type() {
  var c = $("#primitive_r_class").val();
  var p = $("#primitive_r_provider").val() || "";
  keypress_hack.r_provider = p;
  keypress_hack.r_type = "";
  $("#help").hide();
  $("#info").hide();
  $("#parameters").panel("body_element").attrlist({ all_attrs: {}});
  $("#primitive_r_type option").remove();
  // Always have the first type blank (forces user to select something before populating parameters)
  $("#primitive_r_type").append('<option value=""></option>');
  $("#type-spinner").show();
  $("#primitive_r_type").attr("disabled", "disabled");
  disable_apply();
  if (req) req.abort();
  req = $.getJSON('<%= primitives_types_path %>', "r_class=" + escape(c) + "&r_provider=" + escape(p), function(data) {
    $.each(data, function() {
      $("#primitive_r_type").append('<option value="' + escape_field(this.toString()) + '">' + escape_html(this.toString()) + "</option>");
    });
    $("#primitive_r_type").removeAttr("disabled");
    $("#type-spinner").hide();
    enable_apply();
  });
}

function update_params() {
  var t = $("#primitive_r_type").val();
  keypress_hack.r_type = t;
  $("#help").hide();
  $("#info").hide();
  $("#parameters").panel("body_element").attrlist({ all_attrs: {}});
  if (t) {
    var c = $("#primitive_r_class").val();
    var p = $("#primitive_r_provider").val() || "";
    $("#type-spinner").show();
    disable_apply();
    if (req) req.abort();
    req = $.getJSON('<%= primitives_metadata_path %>', "r_class=" + escape(c) + "&r_provider=" + escape(p) + "&r_type=" + escape(t), function(data) {
      // First two probably not necessary
      r_meta = data;

      $("#parameters").panel("body_element").attrlist({ all_attrs: r_meta.parameters });
      if (!$("#parameters").panel("body_element").attrlist("empty")) {
        $("#parameters").panel("expand");
      }
      var default_ops = {};
      $.each(r_meta.ops, function(n, ops) {
        switch (n) {
          case "start":
          case "stop":
          case "monitor":
            if (!default_ops[n]) default_ops[n] = [];
            $.each(ops, function(i, op) {
              default_ops[n].push(op);
            });
            break;
        }
      });
      $("#operations").panel("body_element").oplist({ all_ops: r_meta.ops, set_ops: default_ops });
      $("#operations").panel("expand");

      $("#type-spinner").hide();

      show_info();

      enable_apply();
    });
  } else {
    enable_apply();
  }
}

function show_info() {
  if (r_meta.shortdesc || r_meta.longdesc) {
    $("#info-shortdesc").html(escape_html(r_meta.shortdesc));
    $("#info-longdesc").html(r_meta.longdesc != r_meta.shortdesc ? escape_html(r_meta.longdesc) : "");
    $("#info").show();
  } else {
    $("#info").hide();
  }
}

// conditionally enable form submit
function enable_apply() {
  anything_changed = true;
  var enable = $("#primitive_id").val() != "" && $("#primitive_r_type").val() != "";
  $.each(r_meta.parameters, function(n, v) {
    if (v.required && $("#primitive_params_" + n).val() == "") {
      enable = false;
      return false;
    }
  });
  if (enable) {
    $("#primitive_submit").removeAttr("disabled");
    $("#primitive_revert").removeAttr("disabled");
  } else {
    disable_apply();
  }
}

// unconditionally disable form submit
function disable_apply() {
  $("#primitive_submit").attr("disabled", "disabled");
  $("#primitive_revert").attr("disabled", "disabled");
}

$(function() {
  $("#primitive_r_class")
    .bind("keyup change", function() {
      if ($(this).val() != keypress_hack.r_class) {
        update_provider();
      }
    }).keydown(function() {
      keypress_hack.r_class = $(this).val();
    });

  $("#primitive_r_provider")
    .bind("keyup change", function() {
      if ($(this).val() != keypress_hack.r_provider) {
        update_type();
      }
    }).keydown(function() {
      keypress_hack.r_provider = $(this).val();
    });

  $("#primitive_r_type")
    .bind("keyup change", function() {
      if ($(this).val() != keypress_hack.r_type) {
        update_params();
      }
    }).keydown(function() {
      keypress_hack.r_type = $(this).val();
    });

  $("#parameters").panel({ label: "<%=h escape_javascript _('Parameters') %>", menu_icon: url_root + "/images/transparent-16x16.gif" });
  $("#parameters").panel("body_element").attrlist({
    all_attrs: r_meta.parameters,
    set_attrs: <%= @res.params.to_json %>,
    prefix: "primitive[params]",
    labels: {
      add: "<%= escape_javascript _('Add') %>",
      remove: "<%= escape_javascript _('Remove') %>",
      no_value: "<%= escape_javascript _('You must enter a value') %>"
    },
    dirty: function(event, info) {
      // This might be a bit event-heavy
      enable_apply();
    }
  });
  if (!$("#parameters").panel("body_element").attrlist("empty")) {
    $("#parameters").panel("expand");
  }

  $("#operations").panel({ label: "<%=h escape_javascript _('Operations') %>", menu_icon: url_root + "/images/transparent-16x16.gif" });
  $("#operations").panel("body_element").oplist({
    all_ops: r_meta.ops,
    set_ops: <%= @res.ops.to_json %>,
    prefix: "primitive[ops]",
    labels: {
      add: "<%= escape_javascript _('Add') %>",
      edit: "<%= escape_javascript _('Edit') %>",
      remove: "<%= escape_javascript _('Remove') %>",
      no_value: "<%= escape_javascript _('You must enter a value') %>",
      duplicate_interval: "<%= escape_javascript _('There is already a monitor op with this interval.') %>",
      ok: "<%= escape_javascript _('OK') %>",
      cancel: "<%= escape_javascript _('Cancel') %>"
    },
    dirty: function(event, info) {
      // This might be a bit event-heavy
      enable_apply();
    }
  });
  if (!$("#operations").panel("body_element").oplist("empty")) {
    $("#operations").panel("expand");
  }

  $("#meta").panel({ label: "<%=h escape_javascript _('Meta Attributes') %>", menu_icon: url_root + "/images/transparent-16x16.gif" });
  $("#meta").panel("body_element").attrlist({
    all_attrs: r_meta.meta,
    set_attrs: <%= @res.meta.to_json %>,
    prefix: "primitive[meta]",
    labels: {
      add: "<%= escape_javascript _('Add') %>",
      remove: "<%= escape_javascript _('Remove') %>",
      no_value: "<%= escape_javascript _('You must enter a value') %>"
    },
    dirty: function(event, info) {
      // This might be a bit event-heavy
      enable_apply();
    }
  });
  if (!$("#meta").panel("body_element").attrlist("empty")) {
    $("#meta").panel("expand");
  }

  $("#primitive_id")
    .bind("keyup change", function() {
      enable_apply();
    }).focus();

  // Prevent page reload from causing e.g.: provider to remain ocfs2,
  // but type list is back on heartbeat types.
  $("#primitive_r_class").val(keypress_hack.r_class);
  $("#primitive_r_provider").val(keypress_hack.r_provider);
  $("#primitive_r_type").val(keypress_hack.r_type);

  show_info();

<%= render :partial => 'shared/confirm_revert', :locals => { :button_ids => '#primitive_revert,#primitive_cancel' } %>
});
</script>
<% form_for([ @cib, @res ]) do |f| %>
<% flash.each do |flash_type, message| %>
  <div id="flash-<%= flash_type %>" class="ui-state-<%= flash_type %> ui-corner-all" style="padding: 0.5em; margin-bottom: 0.5em;"><%=h message %></div>
<% end %>
<% @res.errors.each do |message| %>
  <div class="ui-state-error ui-corner-all" style="padding: 0.5em; margin-bottom: 0.5em;"><%=h message %></div>
<% end %>
<table>
  <tr>
    <th><%=h f.label :id, _('Resource ID') %></th>
    <th><%=h f.label :r_class, _('Class') %></th>
    <th><%=h f.label :r_provider, _('Provider') %></th>
    <th><%=h f.label :r_type, _('Type') %></th>
    <td></td>
    <td rowspan="7" style="padding: 1em; vertical-align: top;">
      <!-- info block for this RA -->
      <div id="info" class="ui-state-highlight ui-corner-all" style="padding: 0.5em; display: none; margin-bottom: 1em;">
        <div id="info-shortdesc" style="padding-bottom: 0.5em;"></div>
        <div id="info-longdesc"></div>
      </div>
      <!-- generic help block for use by ui.attrlist -->
      <div id="help" class="ui-state-highlight ui-corner-all" style="padding: 0.5em; display: none;">
        <div id="help-name" style="padding-bottom: 0.5em;"></div>
        <div id="help-shortdesc" style="padding-bottom: 0.5em;"></div>
        <div id="help-longdesc"></div>
      </div>
    </td>
  </tr>
  <tr>
    <td><%= f.text_field :id %></td>
    <td><%= f.select :r_class, options_for_select(Primitive.classes_and_providers[:r_classes], @res.r_class) %></td>
    <td><%=
      if Primitive.classes_and_providers[:r_providers].has_key?(@res.r_class)
        f.select :r_provider, options_for_select(Primitive.classes_and_providers[:r_providers][@res.r_class], @res.r_provider)
      else
        f.select :r_provider, options_for_select([]), {}, { :disabled => true }
      end %></td>
    <td><%= f.select :r_type, options_for_select([''] + Primitive.types(@res.r_class, @res.r_provider), @res.r_type),
      {}, { :class => 'type' } %></td>
    <td><span id="type-spinner" style="display: none;"><%= image_tag 'spinner-16x16.gif', :alt => '' %></span></td>
  </tr>
  <tr>
    <td colspan="4">
      <div id="parameters"></div>
    </td>
  </tr>
  <tr>
    <td colspan="4">
      <div id="operations"></div>
    </td>
  </tr>
  <tr>
    <td colspan="4">
      <div id="meta"></div>
    </td>
  </tr>
  <tr><td>&nbsp;</td></tr>
  <tr>
    <td colspan="4" style="text-align: right;">
      <%= f.submit _('Create Resource'), { :disabled => true } %>
      <%= f.submit _('Revert Changes'), { :id => 'primitive_revert', :name => 'revert', :disabled => true, :style => 'display: none;' } %>
      <%= f.submit _('Back'), { :id => 'primitive_cancel', :name => 'cancel' } %>
    </td>
  </tr>
</table>
<% end %>

